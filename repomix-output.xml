This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  api/
    generate/
      route.ts
    health/
      route.ts
    tweet-count/
      route.ts
  generate/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    badge.tsx
    button.tsx
    card.tsx
    hover-card.tsx
    input.tsx
    select.tsx
    spinner.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
  floating-elements.tsx
  generate-post.tsx
  generator-dashboard.tsx
  landing-page.tsx
  theme-provider.tsx
  theme-toggle.tsx
hooks/
  use-global-tweet-count.ts
  use-toast.ts
lib/
  supabase.ts
  supabaseServer.ts
  utils.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/health/route.ts">
import { NextResponse } from "next/server"

export async function GET() {
  return NextResponse.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    gemini_configured: !!process.env.GEMINI_API_KEY,
  })
}
</file>

<file path="app/api/tweet-count/route.ts">
import { type NextRequest, NextResponse } from "next/server"
import { supabaseServer } from "@/lib/supabaseServer"

export async function GET() {
  try {
    const { data, error } = await supabaseServer
      .from("global_stats")
      .select("stat_value, updated_at")
      .eq("stat_name", "total_tweets")
      .single()

    if (error) {
      console.error("Supabase error fetching tweet count:", error)

      // If no record exists, create one
      if (error.code === "PGRST116") {
        const { data: newData, error: insertError } = await supabaseServer
          .from("global_stats")
          .insert({ stat_name: "total_tweets", stat_value: 42847 })
          .select("stat_value, updated_at")
          .single()

        if (insertError) {
          console.error("Error creating initial tweet count:", insertError)
          return NextResponse.json({ error: "Failed to initialize tweet count" }, { status: 500 })
        }

        return NextResponse.json({
          count: newData.stat_value,
          timestamp: newData.updated_at,
        })
      }

      return NextResponse.json({ error: "Failed to fetch tweet count" }, { status: 500 })
    }

    return NextResponse.json({
      count: data.stat_value,
      timestamp: data.updated_at,
    })
  } catch (error) {
    console.error("Error fetching tweet count:", error)
    return NextResponse.json({ error: "Failed to fetch tweet count" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { action } = body

    if (action === "increment") {
      // Try using the RPC function first
      try {
        const { data, error } = await supabaseServer.rpc("increment_tweet_count")

        if (error) {
          throw error
        }

        return NextResponse.json({
          count: data,
          action: "increment",
          timestamp: new Date().toISOString(),
        })
      } catch (rpcError) {
        console.warn("RPC function failed, falling back to direct update:", rpcError)

        // Fallback to direct SQL update
        const { data, error } = await supabaseServer
          .from("global_stats")
          .select("stat_value")
          .eq("stat_name", "total_tweets")
          .single()

        if (error) {
          console.error("Error fetching current count:", error)
          return NextResponse.json({ error: "Failed to increment tweet count" }, { status: 500 })
        }

        const newCount = data.stat_value + 1

        const { data: updateData, error: updateError } = await supabaseServer
          .from("global_stats")
          .update({ stat_value: newCount })
          .eq("stat_name", "total_tweets")
          .select("stat_value, updated_at")
          .single()

        if (updateError) {
          console.error("Error updating tweet count:", updateError)
          return NextResponse.json({ error: "Failed to increment tweet count" }, { status: 500 })
        }

        return NextResponse.json({
          count: updateData.stat_value,
          action: "increment",
          timestamp: updateData.updated_at,
        })
      }
    } else if (action === "reset") {
      // Reset the counter (admin only)
      const { data, error } = await supabaseServer
        .from("global_stats")
        .update({ stat_value: 0 })
        .eq("stat_name", "total_tweets")
        .select("stat_value, updated_at")
        .single()

      if (error) {
        console.error("Supabase error resetting tweet count:", error)
        return NextResponse.json({ error: "Failed to reset tweet count" }, { status: 500 })
      }

      return NextResponse.json({
        count: data.stat_value,
        action: "reset",
        timestamp: data.updated_at,
      })
    } else {
      return NextResponse.json({ error: "Invalid action. Use 'increment' or 'reset'" }, { status: 400 })
    }
  } catch (error) {
    console.error("Error updating tweet count:", error)
    return NextResponse.json({ error: "Failed to update tweet count" }, { status: 500 })
  }
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/spinner.tsx">
import { cn } from "@/lib/utils"

interface SpinnerProps {
  className?: string
  size?: "sm" | "md" | "lg"
}

export function Spinner({ className, size = "md" }: SpinnerProps) {
  const sizeClasses = {
    sm: "h-4 w-4 border-2",
    md: "h-6 w-6 border-2",
    lg: "h-8 w-8 border-3",
  }

  return (
    <div
      className={cn("animate-spin rounded-full border-t-transparent border-primary", sizeClasses[size], className)}
    />
  )
}
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/floating-elements.tsx">
"use client"

import { useEffect, useState } from "react"

export default function FloatingElements() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) return null

  return (
    <div className="fixed inset-0 pointer-events-none overflow-hidden">
      {/* Floating emojis */}
      <div
        className="absolute top-20 left-10 text-4xl animate-bounce"
        style={{ animationDelay: "0s", animationDuration: "3s" }}
      >
        💩
      </div>
      <div
        className="absolute top-40 right-20 text-3xl animate-bounce"
        style={{ animationDelay: "1s", animationDuration: "4s" }}
      >
        🔥
      </div>
      <div
        className="absolute bottom-40 left-20 text-3xl animate-bounce"
        style={{ animationDelay: "2s", animationDuration: "3.5s" }}
      >
        😂
      </div>
      <div
        className="absolute bottom-20 right-10 text-4xl animate-bounce"
        style={{ animationDelay: "0.5s", animationDuration: "4.5s" }}
      >
        🚀
      </div>

      {/* Floating gradient orbs */}
      <div className="absolute top-1/4 left-1/4 w-32 h-32 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full blur-xl animate-pulse" />
      <div
        className="absolute bottom-1/4 right-1/4 w-40 h-40 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 rounded-full blur-xl animate-pulse"
        style={{ animationDelay: "1s" }}
      />
    </div>
  )
}
</file>

<file path="components/theme-provider.tsx">
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="hooks/use-global-tweet-count.ts">
"use client"

import { useState, useEffect, useCallback } from "react"
import { supabase } from "@/lib/supabase"

interface TweetCountData {
  count: number
  timestamp: string
}

export function useGlobalTweetCount() {
  const [globalCount, setGlobalCount] = useState<number>(0)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [lastUpdated, setLastUpdated] = useState<string | null>(null)

  // Fetch initial count from API
  const fetchCount = useCallback(async () => {
    try {
      setIsLoading(true)
      setError(null)

      const response = await fetch("/api/tweet-count", {
        method: "GET",
        cache: "no-store",
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data: TweetCountData = await response.json()
      setGlobalCount(data.count)
      setLastUpdated(data.timestamp)
    } catch (err) {
      console.error("Error fetching global tweet count:", err)
      setError(err instanceof Error ? err.message : "Failed to fetch count")
      // Fallback to a reasonable number if API fails
      setGlobalCount(42847)
    } finally {
      setIsLoading(false)
    }
  }, [])

  // Increment count via API
  const incrementCount = useCallback(async (): Promise<number> => {
    try {
      const response = await fetch("/api/tweet-count", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ action: "increment" }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data: TweetCountData = await response.json()
      setGlobalCount(data.count)
      setLastUpdated(data.timestamp)
      setError(null)

      return data.count
    } catch (err) {
      console.error("Error incrementing global tweet count:", err)
      setError(err instanceof Error ? err.message : "Failed to increment count")

      // Optimistic update even if API fails
      const newCount = globalCount + 1
      setGlobalCount(newCount)
      return newCount
    }
  }, [globalCount])

  // Reset count (for admin purposes)
  const resetCount = useCallback(async (): Promise<number> => {
    try {
      const response = await fetch("/api/tweet-count", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ action: "reset" }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data: TweetCountData = await response.json()
      setGlobalCount(data.count)
      setLastUpdated(data.timestamp)
      setError(null)

      return data.count
    } catch (err) {
      console.error("Error resetting global tweet count:", err)
      setError(err instanceof Error ? err.message : "Failed to reset count")
      return globalCount
    }
  }, [globalCount])

  // Set up real-time subscription to database changes
  useEffect(() => {
    const channel = supabase
      .channel("global_stats_changes")
      .on(
        "postgres_changes",
        {
          event: "UPDATE",
          schema: "public",
          table: "global_stats",
          filter: "stat_name=eq.total_tweets",
        },
        (payload) => {
          console.log("Real-time update received:", payload)
          if (payload.new && typeof payload.new.stat_value === "number") {
            setGlobalCount(payload.new.stat_value)
            setLastUpdated(payload.new.updated_at)
            setError(null)
          }
        },
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }, [])

  // Fetch count on component mount
  useEffect(() => {
    fetchCount()
  }, [fetchCount])

  // Periodically refresh count as backup to real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      fetchCount()
    }, 60000) // Refresh every 60 seconds as backup

    return () => clearInterval(interval)
  }, [fetchCount])

  return {
    globalCount,
    isLoading,
    error,
    lastUpdated,
    incrementCount,
    resetCount,
    refreshCount: fetchCount,
  }
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/supabase.ts">
import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Database types
export interface GlobalStat {
  id: number
  stat_name: string
  stat_value: number
  created_at: string
  updated_at: string
}
</file>

<file path="lib/supabaseServer.ts">
import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

export const supabaseServer = createClient(supabaseUrl, supabaseServiceKey)
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/generate/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { ThemeToggle } from "@/components/theme-toggle"
import GeneratorDashboard from "@/components/generator-dashboard"
import Link from "next/link"
import { Home } from "lucide-react"
import { Button } from "@/components/ui/button"

export default function GeneratePage() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)

    // Ensure theme is applied on page load
    try {
      const savedTheme = localStorage.getItem("theme")
      if (savedTheme === "white") {
        document.documentElement.classList.add("white-theme")
        document.documentElement.classList.remove("black-theme")
      } else {
        document.documentElement.classList.add("black-theme")
        document.documentElement.classList.remove("white-theme")
      }
    } catch (error) {
      console.warn("Theme initialization error:", error)
      document.documentElement.classList.add("black-theme")
      document.documentElement.classList.remove("white-theme")
    }
  }, [])

  // Prevent hydration mismatch
  if (!mounted) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4"></div>
          <p>Loading Generator...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background text-foreground transition-colors duration-300">
      {/* Top Navigation */}
      <nav className="border-b border-border bg-background/80 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-4">
              <Link href="/">
                <Button variant="ghost" size="sm" className="hover:bg-accent">
                  <Home className="h-4 w-4 mr-2" />
                  Home
                </Button>
              </Link>
              <div className="h-6 w-px bg-border" />
              <h1 className="text-2xl font-bold">TrashTalk Generator</h1>
            </div>
            <ThemeToggle />
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <GeneratorDashboard />
    </div>
  )
}
</file>

<file path="components/generate-post.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Clipboard, Twitter, Sparkles } from "lucide-react"
import { toast } from "@/hooks/use-toast"
import { Toaster } from "@/components/ui/toaster"
import { Spinner } from "@/components/ui/spinner"

export default function ShitpostGenerator() {
  const [shitpost, setShitpost] = useState("")
  const [tone, setTone] = useState("gen-z")
  const [isGenerating, setIsGenerating] = useState(false)
  const [isAnimating, setIsAnimating] = useState(false)
  const [error, setError] = useState("")

  const generateShitpost = async () => {
    setIsGenerating(true)
    setIsAnimating(true)
    setError("")

    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ tone }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || "Failed to generate shitpost")
      }

      setShitpost(data.shitpost)
    } catch (err) {
      console.error("Error generating shitpost:", err)
      setError(err instanceof Error ? err.message : "Something went wrong")
      toast({
        title: "Generation failed",
        description: err instanceof Error ? err.message : "Something went wrong",
        variant: "destructive",
        duration: 3000,
      })
    } finally {
      setIsGenerating(false)

      // Keep animation for a bit longer for visual effect
      setTimeout(() => setIsAnimating(false), 500)
    }
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(shitpost)
    toast({
      title: "Copied to clipboard",
      description: "Your shitpost is ready to be pasted anywhere",
      duration: 2000,
    })
  }

  const tweetIt = () => {
    const tweetText = encodeURIComponent(shitpost)
    window.open(`https://twitter.com/intent/tweet?text=${tweetText}`, "_blank")
  }

  return (
    <>
      <Card className="w-full max-w-md bg-card border-border shadow-xl shadow-primary/10 text-card-foreground">
        <CardHeader className="text-center pb-2">
          <h2 className="text-2xl font-bold text-card-foreground">Unleash chaos, one tweet at a time.</h2>
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="flex flex-col space-y-4">
            <Select value={tone} onValueChange={setTone}>
              <SelectTrigger className="bg-input border-border text-foreground">
                <SelectValue placeholder="Select tone" />
              </SelectTrigger>
              <SelectContent className="bg-popover border-border text-popover-foreground">
                <SelectItem value="gen-z">Gen Z Burnout</SelectItem>
                <SelectItem value="tech-bro">Tech Bro Manifesto</SelectItem>
                <SelectItem value="corporate">Corporate Cringe</SelectItem>
                <SelectItem value="absurdist">Absurdist Nihilism</SelectItem>
                <SelectItem value="anime">Anime Lord</SelectItem>
              </SelectContent>
            </Select>

            <Button
              onClick={generateShitpost}
              disabled={isGenerating}
              variant="default"
              className={`w-full py-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-primary/25 ${isAnimating ? "animate-pulse" : ""}`}
            >
              {isGenerating ? (
                <>
                  <Spinner size="sm" className="mr-2" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-5 w-5" />💩 Make me laugh
                </>
              )}
            </Button>
          </div>

          {error && (
            <div className="bg-destructive/10 border border-destructive/50 rounded-lg p-3 text-destructive-foreground/90 text-sm">{error}</div>
          )}

          {shitpost && (
            <div className="mt-6 relative">
              <div className="bg-muted/50 rounded-lg p-4 border border-border shadow-inner">
                <p className="text-foreground whitespace-pre-line">{shitpost}</p>
              </div>

              <div className="flex justify-between mt-4">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={copyToClipboard}
                  className="text-muted-foreground hover:text-foreground hover:bg-accent"
                >
                  <Clipboard className="h-4 w-4 mr-1" />
                  Copy
                </Button>

                <Button onClick={tweetIt} variant="secondary" size="sm">
                  <Twitter className="h-4 w-4 mr-1" />🔥 Ship it to Twitter
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      <Toaster />
    </>
  )
}
</file>

<file path="components/generator-dashboard.tsx">
"use client"

import { useState, useEffect, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import {
  Clipboard,
  Twitter,
  Sparkles,
  Zap,
  Clock,
  TrendingUp,
  RefreshCw,
  Heart,
  MessageCircle,
  Repeat2,
  BarChart3,
  Lightbulb,
  Target,
  Wand2,
  Globe,
  User,
  Database,
} from "lucide-react"
import { toast } from "@/hooks/use-toast"
import { Toaster } from "@/components/ui/toaster"
import { Spinner } from "@/components/ui/spinner"
import { useGlobalTweetCount } from "@/hooks/use-global-tweet-count"

const toneDescriptions = {
  "gen-z": {
    name: "Gen Z Burnout",
    description: "Existential dread meets internet slang",
    color: "bg-purple-500/20 text-purple-300 border-purple-500/30",
    examples: ["me: adulting is hard", "why is everything so expensive", "mental health? never heard of her"],
  },
  "tech-bro": {
    name: "Tech Bro Manifesto",
    description: "Hustle culture meets delusion",
    color: "bg-blue-500/20 text-blue-300 border-blue-500/30",
    examples: ["disrupting the sleep industry", "my morning routine at 4am", "passive income mindset"],
  },
  corporate: {
    name: "Corporate Cringe",
    description: "Buzzwords and synergy overload",
    color: "bg-green-500/20 text-green-300 border-green-500/30",
    examples: ["let's circle back on this", "thinking outside the box", "low-hanging fruit"],
  },
  absurdist: {
    name: "Absurdist Nihilism",
    description: "Chaos theory meets philosophy",
    color: "bg-orange-500/20 text-orange-300 border-orange-500/30",
    examples: ["what if chairs had feelings", "the void stares back", "existence is a simulation"],
  },
  anime: {
    name: "Anime Lord",
    description: "Weeb culture at maximum power",
    color: "bg-pink-500/20 text-pink-300 border-pink-500/30",
    examples: ["my waifu understands me", "this isn't even my final form", "believe it!"],
  },
}

const tips = [
  "💡 Try combining different tones for unique results",
  "🎯 Shorter prompts often generate funnier content",
  "⚡ The AI learns from your reactions - be chaotic!",
  "🔥 Peak posting hours: 3am when everyone's unhinged",
  "🎭 Each tone has its own personality - experiment!",
  "🌍 You're contributing to the global chaos counter!",
  "📊 Supabase updates in real-time across all users",
  "🔄 Real-time database sync keeps everyone connected",
]

export default function GeneratorDashboard() {
  const [shitpost, setShitpost] = useState("")
  const [tone, setTone] = useState("gen-z")
  const [customPrompt, setCustomPrompt] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [sessionCount, setSessionCount] = useState(0)
  const [sessionStartTime, setSessionStartTime] = useState<Date | null>(null)
  const [currentTip, setCurrentTip] = useState(0)
  const [history, setHistory] = useState<string[]>([])
  const [hasMounted, setHasMounted] = useState(false)

  // Use the global tweet count hook with Supabase
  const {
    globalCount,
    isLoading: isLoadingCount,
    error: countError,
    lastUpdated,
    incrementCount,
    refreshCount,
  } = useGlobalTweetCount()

  // Load session data from localStorage on component mount
  useEffect(() => {
    try {
      const savedSessionCount = localStorage.getItem("trashtalk_session_count")
      const savedHistory = localStorage.getItem("trashtalk_history")

      if (savedSessionCount) {
        setSessionCount(Number.parseInt(savedSessionCount, 10) || 0)
      }

      if (savedHistory) {
        try {
          const parsedHistory = JSON.parse(savedHistory)
          setHistory(Array.isArray(parsedHistory) ? parsedHistory : [])
        } catch {
          setHistory([])
        }
      }

      setSessionStartTime(new Date())
    } catch (error) {
      console.warn("Error loading session data from localStorage:", error)
      setSessionStartTime(new Date())
    }
    setHasMounted(true)
  }, [])

  // Save session data to localStorage whenever it changes
  useEffect(() => {
    try {
      localStorage.setItem("trashtalk_session_count", sessionCount.toString())
      localStorage.setItem("trashtalk_history", JSON.stringify(history))
    } catch (error) {
      console.warn("Error saving session data to localStorage:", error)
    }
  }, [sessionCount, history])

  useEffect(() => {
    // Rotate tips every 5 seconds
    const interval = setInterval(() => {
      setCurrentTip((prev) => (prev + 1) % tips.length)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  // Calculate dynamic stats
  const getSessionDuration = () => {
    if (!sessionStartTime) return "0m"
    const now = new Date()
    const diffMs = now.getTime() - sessionStartTime.getTime()
    const diffMins = Math.floor(diffMs / (1000 * 60))

    if (diffMins < 60) {
      return `${diffMins}m`
    } else {
      const hours = Math.floor(diffMins / 60)
      const mins = diffMins % 60
      return `${hours}h ${mins}m`
    }
  }

  const getChaosLevel = () => {
    if (sessionCount === 0) return "Dormant"
    if (sessionCount < 3) return "Warming Up"
    if (sessionCount < 5) return "Getting Spicy"
    if (sessionCount < 10) return "Full Chaos"
    return "MAXIMUM OVERDRIVE"
  }

  const getSanityPercentage = () => {
    const maxSanity = 100
    const sanityLoss = Math.min(sessionCount * 10, maxSanity)
    return Math.max(maxSanity - sanityLoss, 0)
  }

  // Memoize sanityPercentage for consistent use in JSX
  const sanityPercentage = useMemo(() => {
    const maxSanity = 100;
    const sanityLoss = Math.min(sessionCount * 10, maxSanity);
    return Math.max(maxSanity - sanityLoss, 0);
  }, [sessionCount]);

  // Memoize viralPotential to be hydration-safe and consistent per render
  const currentViralPotential = useMemo(() => {
    const base = 50;
    const bonus = Math.min(sessionCount * 5, 40);
    
    if (!hasMounted) {
      // SSR and initial client render: use a deterministic value
      // Use a fixed "random" factor for SSR to avoid mismatch.
      // sessionCount is 0 during SSR and initial client render before useEffect.
      const ssrBonus = Math.min(0 * 5, 40); // bonus will be 0
      const fixedRandomFactorForSSR = 5; // Example fixed value
      return Math.min(base + ssrBonus + fixedRandomFactorForSSR, 99); // e.g., 55%
    }
    
    // Client-side after mount: use actual Math.random()
    const randomFactor = Math.floor(Math.random() * 10);
    return Math.min(base + bonus + randomFactor, 99);
  }, [hasMounted, sessionCount]);

  const formatLastUpdated = () => {
    if (!lastUpdated) return ""
    const date = new Date(lastUpdated)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffSecs = Math.floor(diffMs / 1000)

    if (diffSecs < 60) return "Just now"
    if (diffSecs < 3600) return `${Math.floor(diffSecs / 60)}m ago`
    return `${Math.floor(diffSecs / 3600)}h ago`
  }

  const stats = [
    {
      label: "Global Tweets",
      value: isLoadingCount ? "Loading..." : globalCount.toLocaleString(),
      icon: <Globe className="h-4 w-4" />,
      subtitle: countError ? "Supabase error" : `Updated ${formatLastUpdated()}`,
      isGlobal: true,
    },
    {
      label: "Your Session",
      value: sessionCount.toString(),
      icon: <User className="h-4 w-4" />,
      subtitle: `${getSessionDuration()} active`,
      isGlobal: false,
    },
    {
      label: "Chaos Level",
      value: getChaosLevel(),
      icon: <TrendingUp className="h-4 w-4" />,
      subtitle: `${sessionCount} generations`,
      isGlobal: false,
    },
    {
      label: "Sanity Remaining",
      value: `${sanityPercentage}%`,
      icon: <BarChart3 className="h-4 w-4" />,
      subtitle: sessionCount > 0 ? "Declining rapidly" : "Still intact",
      isGlobal: false,
    },
  ]

  const generateShitpost = async () => {
    setIsGenerating(true)

    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          tone,
          customPrompt: customPrompt.trim() || undefined,
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (!data.shitpost) {
        throw new Error("No content received from server")
      }

      setShitpost(data.shitpost)

      // Increment session count
      setSessionCount((prev) => prev + 1)

      // Increment global count in Supabase
      const newGlobalCount = await incrementCount()

      // Add to history
      setHistory((prev) => [data.shitpost, ...prev.slice(0, 4)])

      // Show success message with both counts
      if (data.fallback) {
        toast({
          title: "Using backup chaos",
          description: data.message || "API temporarily unavailable, but chaos continues!",
          duration: 3000,
        })
      } else {
        toast({
          title: "Chaos unleashed globally!",
          description: `Tweet #${newGlobalCount} added to Supabase database`,
          duration: 3000,
        })
      }
    } catch (err) {
      console.error("Error generating shitpost:", err)

      // Provide a client-side fallback
      const clientFallbacks = [
        "me: i should sleep\nalso me: researching if penguins have knees",
        "normalize saying 'that's above my pay grade' when someone asks what 2+2 equals",
        "my toxic trait is thinking I can finish a project in one day that actually takes six months",
      ]

      const fallbackPost = clientFallbacks[Math.floor(Math.random() * clientFallbacks.length)]
      setShitpost(fallbackPost)

      // Still increment counts for fallback
      setSessionCount((prev) => prev + 1)
      await incrementCount() // Try to increment global count even for fallbacks
      setHistory((prev) => [fallbackPost, ...prev.slice(0, 4)])

      toast({
        title: "Chaos never stops!",
        description: "Network hiccup detected, but we've got backup chaos ready",
        duration: 3000,
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const resetSessionStats = () => {
    setSessionCount(0)
    setHistory([])
    setShitpost("")
    setCustomPrompt("")
    setTone("gen-z")
    setSessionStartTime(new Date())

    try {
      localStorage.removeItem("trashtalk_session_count")
      localStorage.removeItem("trashtalk_history")
    } catch (error) {
      console.warn("Error clearing localStorage:", error)
    }

    toast({
      title: "Session reset",
      description: "Starting fresh with a clean slate",
      duration: 2000,
    })
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(shitpost)
    toast({
      title: "Copied to clipboard",
      description: "Your shitpost is ready to unleash chaos",
      duration: 2000,
    })
  }

  const tweetIt = () => {
    const tweetText = encodeURIComponent(shitpost)
    window.open(`https://twitter.com/intent/tweet?text=${tweetText}`, "_blank")
  }

  const selectedTone = toneDescriptions[tone as keyof typeof toneDescriptions]

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="grid lg:grid-cols-3 gap-8 h-full">
        {/* Left Sidebar - Controls & Info */}
        <div className="space-y-6">
          {/* Dynamic Stats Cards */}
          <div className="grid grid-cols-2 gap-4">
            {stats.map((stat, index) => (
              <Card
                key={index}
                className={`bg-card border-border hover:border-foreground/50 transition-all duration-300 ${
                  stat.isGlobal ? "ring-1 ring-blue-500/20" : ""
                }`}
              >
                <CardContent className="p-4 text-center">
                  <div className="flex justify-center mb-2 text-muted-foreground">
                    {stat.isGlobal && <Database className="h-3 w-3 mr-1" />}
                    {stat.icon}
                  </div>
                  <div className="text-2xl font-bold">{stat.value}</div>
                  <div className="text-xs text-muted-foreground">{stat.label}</div>
                  {stat.subtitle && <div className="text-xs text-muted-foreground/70 mt-1">{stat.subtitle}</div>}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Supabase Status */}
          <Card className="bg-card border-border">
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <Database className="h-4 w-4" />
                  <span className="text-sm font-semibold">Supabase Status</span>
                </div>
                <div className="flex items-center gap-2">
                  <div
                    className={`w-2 h-2 rounded-full ${
                      countError ? "bg-red-500" : isLoadingCount ? "bg-yellow-500" : "bg-green-500"
                    }`}
                  />
                  <span className="text-xs text-muted-foreground">
                    {countError ? "Error" : isLoadingCount ? "Loading" : "Connected"}
                  </span>
                </div>
                <Button variant="ghost" size="sm" onClick={refreshCount} className="ml-auto h-6 px-2">
                  <RefreshCw className="h-3 w-3" />
                </Button>
              </div>
              {countError && <div className="mt-2 text-xs text-red-400 bg-red-900/20 p-2 rounded">{countError}</div>}
            </CardContent>
          </Card>

          {/* Tone Selection */}
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5" />
                Choose Your Chaos
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Select value={tone} onValueChange={setTone}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-background border-border">
                  {Object.entries(toneDescriptions).map(([key, desc]) => (
                    <SelectItem key={key} value={key}>
                      {desc.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <div className={`p-3 rounded-lg border ${selectedTone.color}`}>
                <div className="font-semibold mb-1">{selectedTone.name}</div>
                <div className="text-sm opacity-80 mb-2">{selectedTone.description}</div>
                <div className="text-xs">
                  <strong>Examples:</strong> {selectedTone.examples.join(" • ")}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Custom Prompt */}
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                Custom Chaos (Optional)
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="Add your own twist... (e.g., 'about cats', 'involving pizza', 'existential crisis')"
                value={customPrompt}
                onChange={(e) => setCustomPrompt(e.target.value)}
                className="bg-background border-border resize-none"
                rows={3}
              />
            </CardContent>
          </Card>

          {/* Tips */}
          <Card className="bg-card border-border">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <div className="text-2xl">💡</div>
                <div>
                  <div className="font-semibold text-sm mb-1">Pro Tip</div>
                  <div className="text-sm text-muted-foreground transition-all duration-500">{tips[currentTip]}</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Center - Main Generator */}
        <div className="space-y-6">
          {/* Generation Button */}
          <Card className="bg-card border-border">
            <CardContent className="p-8 text-center">
              <div className="space-y-6">
                <div>
                  <h2 className="text-3xl font-bold mb-2">Ready to Go Viral?</h2>
                  <p className="text-muted-foreground">
                    Generate {sessionCount > 0 ? "another" : "your first"} masterpiece of chaos
                  </p>
                  {sessionCount > 0 && (
                    <p className="text-sm text-muted-foreground mt-1">
                      You're on a roll! {sessionCount} tweet{sessionCount !== 1 ? "s" : ""} this session
                    </p>
                  )}
                  <p className="text-xs text-muted-foreground mt-2">
                    🌍 Contributing to {globalCount.toLocaleString()} global tweets in Supabase
                  </p>
                </div>

                <Button
                  onClick={generateShitpost}
                  disabled={isGenerating}
                  size="lg"
                  className="w-full py-8 text-xl bg-foreground text-background hover:scale-105 transition-all duration-300 group"
                >
                  {isGenerating ? (
                    <>
                      <Spinner size="sm" className="mr-3" />
                      Brewing Chaos...
                    </>
                  ) : (
                    <>
                      <Wand2 className="mr-3 h-6 w-6 group-hover:rotate-12 transition-transform" />💩 Unleash the Chaos
                    </>
                  )}
                </Button>

                {sessionCount > 0 && (
                  <div className="text-sm text-muted-foreground">
                    🎉 Session chaos: {sessionCount} tweet{sessionCount !== 1 ? "s" : ""}!
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Generated Content */}
          {shitpost && (
            <Card className="bg-card border-border border-2 hover:border-foreground/50 transition-all duration-300">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5" />
                    Global Tweet #{globalCount}
                  </span>
                  <Badge variant="outline" className={selectedTone.color}>
                    {selectedTone.name}
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Tweet Preview */}
                <div className="bg-background border border-border rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <div className="w-12 h-12 bg-foreground rounded-full flex items-center justify-center">
                      <span className="text-background font-bold">U</span>
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="font-bold">Chaotic You</span>
                        <span className="text-muted-foreground">@unhinged_user</span>
                        <span className="text-muted-foreground">·</span>
                        <span className="text-muted-foreground">now</span>
                      </div>
                      <p className="text-foreground whitespace-pre-line mb-4 text-lg leading-relaxed">{shitpost}</p>
                      <div className="flex items-center space-x-6 text-muted-foreground">
                        <div className="flex items-center space-x-1 hover:text-foreground transition-colors cursor-pointer">
                          <MessageCircle className="h-4 w-4" />
                          <span className="text-sm">{Math.floor(Math.random() * 500) + 50}</span>
                        </div>
                        <div className="flex items-center space-x-1 hover:text-foreground transition-colors cursor-pointer">
                          <Repeat2 className="h-4 w-4" />
                          <span className="text-sm">{Math.floor(Math.random() * 1000) + 100}</span>
                        </div>
                        <div className="flex items-center space-x-1 hover:text-foreground transition-colors cursor-pointer">
                          <Heart className="h-4 w-4" />
                          <span className="text-sm">{Math.floor(Math.random() * 2000) + 500}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex gap-3">
                  <Button onClick={copyToClipboard} variant="outline" className="flex-1 hover:bg-accent">
                    <Clipboard className="h-4 w-4 mr-2" />
                    Copy to Clipboard
                  </Button>
                  <Button onClick={tweetIt} className="flex-1 bg-blue-500 hover:bg-blue-600 text-white">
                    <Twitter className="h-4 w-4 mr-2" />🚀 Tweet This Chaos
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Right Sidebar - History & Analytics */}
        <div className="space-y-6">
          {/* Recent History */}
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5" />
                Recent Chaos
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {history.length > 0 ? (
                history.map((post, index) => (
                  <div
                    key={index}
                    className="p-3 bg-background border border-border rounded-lg hover:border-foreground/50 transition-all duration-200 cursor-pointer group"
                    onClick={() => {
                      setShitpost(post)
                      toast({
                        title: "Loaded from history",
                        description: "Previous chaos restored",
                        duration: 2000,
                      })
                    }}
                  >
                    <p className="text-sm line-clamp-3 group-hover:text-foreground transition-colors">{post}</p>
                    <div className="text-xs text-muted-foreground mt-1">Click to reload</div>
                  </div>
                ))
              ) : (
                <div className="text-center text-muted-foreground py-8">
                  <Clock className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">No chaos generated yet</p>
                  <p className="text-xs">Your history will appear here</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5" />
                Quick Actions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
                onClick={() => setCustomPrompt("about my existential crisis")}
              >
                😵 Existential Crisis Mode
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
                onClick={() => setCustomPrompt("involving cats and chaos")}
              >
                🐱 Cat Chaos Generator
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
                onClick={() => setCustomPrompt("3am thoughts")}
              >
                🌙 3AM Energy Only
              </Button>
              <Button variant="outline" size="sm" className="w-full justify-start" onClick={resetSessionStats}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Reset Session Stats
              </Button>
            </CardContent>
          </Card>

          {/* Dynamic Chaos Meter */}
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5" />
                Your Impact
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {/* Sanity Level */}
              <div>
                <div className="text-sm text-muted-foreground">Sanity Level</div>
                <div className="flex items-center gap-2">
                  <div className="w-full bg-muted rounded-full h-2">
                    <div
                      className="bg-foreground h-2 rounded-full transition-all duration-1000"
                      style={{ width: `${sanityPercentage}%` }}
                    />
                  </div>
                  <div className="text-sm font-bold">{sanityPercentage}%</div>
                </div>
              </div>
              {/* Viral Potential */}
              <div>
                <div className="text-sm text-muted-foreground">Viral Potential</div>
                <div className="flex items-center gap-2">
                  <div className="w-full bg-muted rounded-full h-2">
                    <div
                      className="bg-blue-500 h-2 rounded-full transition-all duration-1000"
                      style={{ width: `${currentViralPotential}%` }}
                    />
                  </div>
                  <div className="text-sm font-bold">{currentViralPotential}%</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      <Toaster />
    </div>
  )
}
</file>

<file path="components/landing-page.tsx">
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ArrowRight, Zap, Clock, Sparkles, Twitter, Heart, MessageCircle, Repeat2 } from "lucide-react"
import Link from "next/link"

const sampleTweets = [
  {
    text: "me: i should sleep\nalso me at 3am: researching if penguins have knees",
    likes: 2847,
    retweets: 892,
    replies: 156,
  },
  {
    text: "job interview: 'where do you see yourself in 5 years?'\nme: 'sir this is a wendy's'",
    likes: 5234,
    retweets: 1456,
    replies: 289,
  },
  {
    text: "normalize saying 'that's above my pay grade' when someone asks what 2+2 equals",
    likes: 3891,
    retweets: 1123,
    replies: 234,
  },
]

const features = [
  {
    icon: <Zap className="h-8 w-8" />,
    title: "AI-Powered Chaos",
    description: "Our AI has been trained on the finest internet garbage to create premium shitposts",
  },
  {
    icon: <Clock className="h-8 w-8" />,
    title: "Instant Regret",
    description: "Generate tweets so fast you'll question your life choices in real-time",
  },
  {
    icon: <Sparkles className="h-8 w-8" />,
    title: "Multiple Personalities",
    description: "Choose from Gen Z burnout to corporate cringe - we've got all your toxic traits covered",
  },
]

export default function LandingPage() {
  const [currentTweet, setCurrentTweet] = useState(0)
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return

    const interval = setInterval(() => {
      setCurrentTweet((prev) => (prev + 1) % sampleTweets.length)
    }, 4000)
    return () => clearInterval(interval)
  }, [mounted])

  if (!mounted) {
    return (
      <div className="space-y-20 animate-pulse">
        <div className="text-center space-y-8 py-20">
          <div className="space-y-4">
            <div className="h-32 bg-muted rounded-lg mx-auto max-w-4xl"></div>
            <div className="h-8 bg-muted rounded-lg mx-auto max-w-2xl"></div>
            <div className="h-6 bg-muted rounded-lg mx-auto max-w-3xl"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-20">
      {/* Hero Section */}
      <section className="text-center space-y-8 py-20">
        <div className="space-y-4">
          <h1 className="text-6xl md:text-8xl font-black tracking-tight fade-in-up">
            Get Absolutely
            <br />
            <span className="relative">
              UNHINGED
              <div className="absolute -inset-2 border-4 border-current animate-pulse-glow rounded-lg"></div>
            </span>
            <br />
            Online
          </h1>
          <p className="text-xl md:text-2xl text-muted-foreground max-w-2xl mx-auto fade-in-up stagger-1">
            Publish to Twitter in Seconds
          </p>
          <p className="text-lg text-muted-foreground max-w-3xl mx-auto fade-in-up stagger-2">
            Generate hilariously unhinged tweets that will make your followers question your sanity (and hit that follow
            button)
          </p>
        </div>

        <div className="fade-in-up stagger-3">
          <Link href="/generate">
            <Button
              size="lg"
              className="text-xl px-8 py-6 bg-foreground text-background hover:scale-105 transition-all duration-300 group"
            >
              Start Being Problematic
              <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
            </Button>
          </Link>
          <p className="text-sm text-muted-foreground mt-2">
            Warning: May cause sudden increase in followers and existential dread
          </p>
        </div>
      </section>

      {/* Demo Tweet Card */}
      <section className="max-w-md mx-auto fade-in-up stagger-4">
        <h2 className="text-2xl font-bold text-center mb-8">See the Magic in Action</h2>
        <Card className="bg-card border-2 border-border hover:border-foreground transition-all duration-300 animate-float">
          <CardContent className="p-6">
            <div className="flex items-start space-x-3">
              <div className="w-12 h-12 bg-foreground rounded-full flex items-center justify-center">
                <span className="text-background font-bold">U</span>
              </div>
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="font-bold">Unhinged User</span>
                  <span className="text-muted-foreground">@chaotic_energy</span>
                  <span className="text-muted-foreground">·</span>
                  <span className="text-muted-foreground">2m</span>
                </div>
                <p className="text-foreground whitespace-pre-line mb-4 transition-all duration-500">
                  {sampleTweets[currentTweet].text}
                </p>
                <div className="flex items-center space-x-6 text-muted-foreground">
                  <div className="flex items-center space-x-1 hover:text-foreground transition-colors">
                    <MessageCircle className="h-4 w-4" />
                    <span className="text-sm">{sampleTweets[currentTweet].replies}</span>
                  </div>
                  <div className="flex items-center space-x-1 hover:text-foreground transition-colors">
                    <Repeat2 className="h-4 w-4" />
                    <span className="text-sm">{sampleTweets[currentTweet].retweets}</span>
                  </div>
                  <div className="flex items-center space-x-1 hover:text-foreground transition-colors">
                    <Heart className="h-4 w-4" />
                    <span className="text-sm">{sampleTweets[currentTweet].likes}</span>
                  </div>
                  <div className="flex items-center space-x-1 hover:text-foreground transition-colors">
                    <Twitter className="h-4 w-4" />
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        <div className="flex justify-center space-x-2 mt-4">
          {sampleTweets.map((_, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full transition-all duration-300 ${
                index === currentTweet ? "bg-foreground" : "bg-muted-foreground"
              }`}
            />
          ))}
        </div>
      </section>

      {/* Features Section */}
      <section className="space-y-12">
        <h2 className="text-4xl font-bold text-center fade-in-up">Why Choose Professional Chaos?</h2>
        <div className="grid md:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <Card
              key={index}
              className={`bg-card border-2 border-border hover:border-foreground transition-all duration-300 hover:scale-105 fade-in-up stagger-${index + 1}`}
            >
              <CardContent className="p-6 text-center space-y-4">
                <div className="flex justify-center text-foreground">{feature.icon}</div>
                <h3 className="text-xl font-bold">{feature.title}</h3>
                <p className="text-muted-foreground">{feature.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      {/* Social Proof */}
      <section className="space-y-8 fade-in-up stagger-4">
        <h2 className="text-3xl font-bold text-center">Join the Chaos (Responsibly)</h2>
        <div className="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto">
          {[
            {
              name: "Sarah K.",
              handle: "@sarahcodes",
              text: "Finally, an AI that gets my vibe. My engagement is up 300% and my therapist is booked solid.",
            },
            {
              name: "Mike R.",
              handle: "@mikethoughts",
              text: "I went from 12 followers to 12K in a month. Now my mom thinks I'm internet famous.",
            },
            {
              name: "Alex P.",
              handle: "@alexrants",
              text: "This app perfectly captures my 3am energy. My tweets now make sense to other insomniacs.",
            },
          ].map((testimonial, index) => (
            <Card key={index} className="bg-card border border-border">
              <CardContent className="p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <div className="w-8 h-8 bg-foreground rounded-full flex items-center justify-center">
                    <span className="text-background text-sm font-bold">{testimonial.name.charAt(0)}</span>
                  </div>
                  <div>
                    <p className="font-semibold text-sm">{testimonial.name}</p>
                    <p className="text-muted-foreground text-xs">{testimonial.handle}</p>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">"{testimonial.text}"</p>
                <div className="flex mt-2">
                  {[...Array(5)].map((_, i) => (
                    <span key={i} className="text-foreground">
                      ★
                    </span>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      {/* Final CTA */}
      <section className="text-center space-y-6 py-16 fade-in-up stagger-5">
        <h2 className="text-4xl font-bold">Ready to Become Internet Famous?</h2>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          Stop tweeting like a normal person. Start tweeting like the chaotic energy the internet deserves.
        </p>
        <Link href="/generate">
          <Button
            size="lg"
            className="text-xl px-12 py-6 bg-foreground text-background hover:scale-110 transition-all duration-300 animate-pulse-glow"
          >
            🚀 Launch My Chaos Era
          </Button>
        </Link>
        <p className="text-sm text-muted-foreground">No credit card required. Just your dignity (optional).</p>
      </section>
    </div>
  )
}
</file>

<file path="components/theme-toggle.tsx">
"use client"

import { useState, useEffect } from "react"
import { Moon, Sun } from "lucide-react"
import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const [isWhiteTheme, setIsWhiteTheme] = useState(false)
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)

    try {
      // Check if user has a theme preference in localStorage
      const savedTheme = localStorage.getItem("theme")
      const preferWhite = savedTheme === "white"
      setIsWhiteTheme(preferWhite)

      // Apply theme to document
      if (preferWhite) {
        document.documentElement.classList.add("white-theme")
        document.documentElement.classList.remove("black-theme")
      } else {
        document.documentElement.classList.add("black-theme")
        document.documentElement.classList.remove("white-theme")
      }
    } catch (error) {
      console.warn("Theme initialization error:", error)
      // Default to black theme
      document.documentElement.classList.add("black-theme")
      document.documentElement.classList.remove("white-theme")
    }
  }, [])

  const toggleTheme = () => {
    if (!mounted) return

    try {
      const newTheme = !isWhiteTheme
      setIsWhiteTheme(newTheme)
      localStorage.setItem("theme", newTheme ? "white" : "black")

      if (newTheme) {
        document.documentElement.classList.add("white-theme")
        document.documentElement.classList.remove("black-theme")
      } else {
        document.documentElement.classList.add("black-theme")
        document.documentElement.classList.remove("white-theme")
      }
    } catch (error) {
      console.warn("Theme toggle error:", error)
    }
  }

  // Don't render until mounted to prevent hydration mismatch
  if (!mounted) {
    return (
      <div className="rounded-full w-10 h-10 border-2 border-current flex items-center justify-center">
        <div className="w-5 h-5 bg-current rounded-full opacity-50"></div>
      </div>
    )
  }

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={toggleTheme}
      className="rounded-full w-10 h-10 transition-all hover:scale-110 border-2 border-current"
    >
      {isWhiteTheme ? <Moon className="h-5 w-5 text-black" /> : <Sun className="h-5 w-5 text-white" />}
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    domains: ['avatars.githubusercontent.com', 'lh3.googleusercontent.com'],
  },
};

export default nextConfig;
</file>

<file path="app/api/generate/route.ts">
import { type NextRequest, NextResponse } from "next/server"

// System prompt for Gemini
const SYSTEM_PROMPT = `You are an extremely online, ironic shitposter who thrives on absurdity, memes, pop culture, and chaos. Your job is to generate short, punchy, hilarious tweets that are intentionally weird, sarcastic, edgy (but not offensive), and extremely relatable or unrelatable in a funny way.

Tone:
- Ironic, Gen Z humor
- Self-deprecating or hyper-confident
- Often uses meme formats or unexpected punchlines

Formatting Rules:
- Limit to 280 characters
- Can include line breaks for comedic timing
- No hashtags, no emojis unless used ironically
- Use lowercase for casual tone, ALL CAPS for dramatic effect

Style Examples:
- "me: i should sleep
also me at 3am: who would win in a fight, a billion lions or the sun?"
- "every day i wake up and choose violence. then i snooze my alarm and go back to sleep."
- "job interview question: 'how do you handle stress?'
me: poorly"

Avoid:
- Anything hateful, political, NSFW, or triggering
- Slurs, targeted jokes, or real people/events unless universally understood memes

Output Format:
- One tweet per output
- No explanations
- Keep it weird, keep it stupid, keep it funny`

// Tone descriptions for Gemini
const TONE_DESCRIPTIONS = {
  "gen-z":
    "Generate a tweet with Gen Z Burnout humor. Use lowercase, internet slang, and existential dread mixed with humor.",
  "tech-bro":
    "Generate a tweet in Tech Bro Manifesto style. Reference hustle culture, startups, crypto, or productivity hacks in an ironic way.",
  corporate:
    "Generate a tweet with Corporate Cringe humor. Use corporate buzzwords and jargon in an absurd, satirical way.",
  absurdist: "Generate a tweet with Absurdist Nihilism humor. Make it weird, random, and philosophical in a funny way.",
  anime: "Generate a tweet as an Anime Lord. Reference anime tropes and culture in an over-the-top, self-aware way.",
}

// Fallback shitposts in case API fails
const FALLBACK_SHITPOSTS = [
  "me: i should sleep\nalso me at 3am: researching if penguins have knees",
  "job interview: 'where do you see yourself in 5 years?'\nme: 'sir this is a wendy's'",
  "normalize saying 'that's above my pay grade' when someone asks what 2+2 equals",
  "my toxic trait is thinking I can finish a project in one day that actually takes six months",
  "dating app idea: you match based on what browser extensions you have installed",
  "just saw someone call a PDF a 'peef' and I think I need to log off for the day",
  "every day i wake up and choose violence. then i snooze my alarm and go back to sleep.",
  "me: i'm gonna be productive today\nalso me: learns how tall peppa pig is (7'1 btw)",
]

export async function POST(request: NextRequest) {
  try {
    // Parse request body with error handling
    let body
    try {
      body = await request.json()
    } catch (parseError) {
      console.error("Failed to parse request body:", parseError)
      return NextResponse.json({ error: "Invalid request format" }, { status: 400 })
    }

    const { tone = "gen-z", customPrompt } = body

    // Validate tone
    if (!TONE_DESCRIPTIONS[tone as keyof typeof TONE_DESCRIPTIONS]) {
      return NextResponse.json({ error: "Invalid tone specified" }, { status: 400 })
    }

    // Check if API key exists
    if (!process.env.GEMINI_API_KEY) {
      console.warn("GEMINI_API_KEY not found, using fallback")
      // Return a random fallback shitpost
      const randomPost = FALLBACK_SHITPOSTS[Math.floor(Math.random() * FALLBACK_SHITPOSTS.length)]
      return NextResponse.json({ shitpost: randomPost })
    }

    const toneDescription = TONE_DESCRIPTIONS[tone as keyof typeof TONE_DESCRIPTIONS]

    // Construct the prompt for Gemini with optional custom prompt
    let userPrompt = toneDescription
    if (customPrompt && customPrompt.trim()) {
      userPrompt += ` Focus the tweet on: ${customPrompt.trim()}`
    }

    // Call Gemini API with timeout and error handling
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: SYSTEM_PROMPT }, { text: userPrompt }],
              },
            ],
            generationConfig: {
              temperature: 0.9,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 300,
            },
          }),
          signal: controller.signal,
        },
      )

      clearTimeout(timeoutId)

      if (!response.ok) {
        console.error("Gemini API error:", response.status, response.statusText)
        throw new Error(`Gemini API returned ${response.status}`)
      }

      const data = await response.json()

      // Handle potential errors in the Gemini response
      if (!data.candidates || data.candidates.length === 0) {
        console.error("Gemini API returned no candidates:", data)
        throw new Error("No content generated")
      }

      // Extract the generated text
      const generatedText = data.candidates[0]?.content?.parts?.[0]?.text

      if (!generatedText) {
        console.error("No text in Gemini response:", data)
        throw new Error("No text generated")
      }

      return NextResponse.json({ shitpost: generatedText.trim() })
    } catch (fetchError) {
      clearTimeout(timeoutId)
      console.error("Gemini API fetch error:", fetchError)

      // Return fallback on API failure
      const randomPost = FALLBACK_SHITPOSTS[Math.floor(Math.random() * FALLBACK_SHITPOSTS.length)]
      return NextResponse.json({
        shitpost: randomPost,
        fallback: true,
        message: "Using fallback due to API issues",
      })
    }
  } catch (error) {
    console.error("Error in generate route:", error)

    // Return fallback on any error
    const randomPost = FALLBACK_SHITPOSTS[Math.floor(Math.random() * FALLBACK_SHITPOSTS.length)]
    return NextResponse.json({
      shitpost: randomPost,
      fallback: true,
      message: "Using fallback due to server error",
    })
  }
}

// Handle other HTTP methods
export async function GET() {
  return NextResponse.json({ error: "Method not allowed" }, { status: 405 })
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;
  --primary: 262.1 83.3% 57.8%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;
  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 262.1 83.3% 57.8%;
  --radius: 0.5rem;
}

/* Black Theme (Default) */
.black-theme {
  --background: 0 0% 0%;
  --foreground: 0 0% 100%;
  --card: 0 0% 5%;
  --card-foreground: 0 0% 100%;
  --popover: 0 0% 5%;
  --popover-foreground: 0 0% 100%;
  --primary: 0 0% 100%;
  --primary-foreground: 0 0% 0%;
  --secondary: 0 0% 10%;
  --secondary-foreground: 0 0% 100%;
  --muted: 0 0% 10%;
  --muted-foreground: 0 0% 70%;
  --accent: 0 0% 10%;
  --accent-foreground: 0 0% 100%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 100%;
  --border: 0 0% 20%;
  --input: 0 0% 10%;
  --ring: 0 0% 100%;
}

/* White Theme */
.white-theme {
  --background: 0 0% 100%;
  --foreground: 0 0% 0%;
  --card: 0 0% 95%;
  --card-foreground: 0 0% 0%;
  --popover: 0 0% 95%;
  --popover-foreground: 0 0% 0%;
  --primary: 0 0% 0%;
  --primary-foreground: 0 0% 100%;
  --secondary: 0 0% 90%;
  --secondary-foreground: 0 0% 0%;
  --muted: 0 0% 90%;
  --muted-foreground: 0 0% 30%;
  --accent: 0 0% 90%;
  --accent-foreground: 0 0% 0%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 100%;
  --border: 0 0% 80%;
  --input: 0 0% 90%;
  --ring: 0 0% 0%;
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground transition-colors duration-300;
  }
}

/* Custom animations */
@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
  }
  50% {
    box-shadow: 0 0 30px rgba(255, 255, 255, 0.3);
  }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite;
}

.fade-in-up {
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp 0.6s ease-out forwards;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.stagger-1 {
  animation-delay: 0.1s;
}
.stagger-2 {
  animation-delay: 0.2s;
}
.stagger-3 {
  animation-delay: 0.3s;
}
.stagger-4 {
  animation-delay: 0.4s;
}
.stagger-5 {
  animation-delay: 0.5s;
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next";
import {Inter} from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

export const metadata = {
  title: "TrashTalk - Twitter Shitpost Generator",
  description: "Generate hilarious Twitter shitposts with AI",
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${inter.variable}antialiased`}
        >
        <ThemeProvider attribute="class" defaultTheme="dark" enableSystem={false}>
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { ThemeToggle } from "@/components/theme-toggle"
import LandingPage from "@/components/landing-page"

export default function Home() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)

    // Set default theme on mount
    try {
      const savedTheme = localStorage.getItem("theme")
      if (!savedTheme) {
        document.documentElement.classList.add("black-theme")
        localStorage.setItem("theme", "black")
      }
    } catch (error) {
      console.warn("Theme initialization error:", error)
      document.documentElement.classList.add("black-theme")
    }
  }, [])

  // Prevent hydration mismatch by not rendering until mounted
  if (!mounted) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4"></div>
          <p>Loading TrashTalk...</p>
        </div>
      </div>
    )
  }

  return (
    <main className="min-h-screen bg-background text-foreground transition-colors duration-300">
      <div className="container mx-auto px-4 py-8">
        <header className="flex justify-between items-center mb-8 fade-in-up">
          <h1 className="text-3xl font-bold">TrashTalk</h1>
          <ThemeToggle />
        </header>

        <LandingPage />

        <footer className="mt-16 text-center text-xs text-muted-foreground fade-in-up stagger-5">
          <p>🚀 Powered by AI. Offense not guaranteed, but highly likely.</p>
          <p className="mt-1">Built with questionable taste and solid tech.</p>
        </footer>
      </div>
    </main>
  )
}
</file>

<file path="package.json">
{
  "name": "trashtalk",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-toast": "^1.2.14",
    "@supabase/supabase-js": "^2.49.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.511.0",
    "motion": "^12.12.1",
    "next": "15.1.8",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.8",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

</files>
